apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'


android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.komnacki.sportresultstracker"
        minSdkVersion 27
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    // Room (use 1.1.0-alpha3 for latest alpha)
    implementation "android.arch.persistence.room:runtime:1.0.0"
    kapt "android.arch.persistence.room:compiler:1.0.0"

    //Dagger
    kapt 'com.google.dagger:dagger-compiler:2.14'
    compile 'com.google.dagger:dagger:2.14'

    //ViewModel&LiveData
    implementation "android.arch.lifecycle:extensions:1.1.0"
    kapt "android.arch.lifecycle:compiler:1.1.0"

    //Masks for EditText
    compile 'com.redmadrobot:inputmask:2.3.0'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    testImplementation 'junit:junit:4.12'
//    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'org.mockito:mockito-inline:2.13.0'

//    androidTestImplementation 'com.android.support.test:runner:1.0.1'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
//    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    compile 'ru.egslava:MaskedEditText:1.0.5'

    // AndroidJUnitRunner and JUnit Rules
    androidTestCompile 'com.android.support.test:runner:1.0.1'
    androidTestCompile 'com.android.support.test:rules:1.0.1'

    // espresso support
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:3.0.1'

    // for intent mocking
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:3.0.1'

    // for network testing to track idle state
    androidTestCompile 'com.android.support.test.espresso.idling:idling-concurrent:3.0.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-idling-resource:3.0.1'


    // other dependencies

//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
//    androidTestImplementation 'androidx.test:runner:1.1.0'
//    androidTestImplementation 'androidx.test:rules:1.1.0'

}
repositories {
    mavenCentral()
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
    xml.enabled = true
    html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/data/models/*']

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])

}


